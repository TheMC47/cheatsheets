#+TITLE: Cheatsheets
#+AUTHOR: Yecine Megdiche
#+DESCRIPTION: Cool things and (useful) tricks that I might forget, to make the code elegant and performant. Designed for org-mode.

* Python
** Strings
*** sprintf style formatting:
#+BEGIN_SRC python
hw12 = '%s %s %d' % (hello, world, 12)  # sprintf style string formatting
# OR
hw12 = '%s %s %d'.format(hello, world, 12)  # sprintf style string formatting
#+END_SRC
** Containers
*** List comprehensions
#+BEGIN_SRC python
def quicksort(array):
    if len(array) <= 1:
        return array
    pivot = array[len(array) // 2]
    left = [x for x in array if x < pivot]
    middle = [x for x in array if x == pivot]
    right = [x for x in array if x > pivot]
    return quicksort(left) + middle + quicksort(right)
#+END_SRC
*** Enumeration
#+BEGIN_SRC python
animals = ['cat', 'dog', 'monkey']
for idx, animal in enumerate(animals):
    print('#%d: %s' % (idx + 1, animal))
#+END_SRC
*** Dictionairies
#+BEGIN_SRC python
d = {'cat': 'cute', 'dog': 'furry'}  # Create a new dictionary with some data
print('cat' in d)     # Check if a dictionary has a given key; prints "True"
print(d.get('monkey', 'N/A'))  # Get an element with a default; prints "N/A"
del d['dog'] # Remove an element
# Loop
# Keys
d = {'person': 2, 'cat': 4, 'spider': 8}
for animal in d:
    legs = d[animal]
    print('A %s has %d legs' % (animal, legs))
# Items
d = {'person': 2, 'cat': 4, 'spider': 8}
for animal, legs in d.items():
    print('A %s has %d legs' % (animal, legs))
# Comprehensions
nums = [0, 1, 2, 3, 4]
even_num_to_square = {x: x ** 2 for x in nums if x % 2 == 0}
print(even_num_to_square)  # Prints "{0: 0, 2: 4, 4: 16}"
#+END_SRC
*** Sets
#+BEGIN_SRC python
animals = {'cat', 'dog'}
print('cat' in animals)   # Check if an element is in a set; prints "True"
animals.add('fish')       # Add an element to a set
animals.remove('cat')     # Remove an element from a set
# Comprehensions
from math import sqrt
nums = {int(sqrt(x)) for x in range(30)}
#+END_SRC
*** Tuples
Tuples are immutable. Can be elements of sets keys for dictionarie
** Classes
#+BEGIN_SRC python
class Greeter(object):

    # Constructor
    def __init__(self, name):
        self.name = name  # Create an instance variable

    # Instance method
    def greet(self, loud=False):
        if loud:
            print('HELLO, %s!' % self.name.upper())
        else:
            print('Hello, %s' % self.name)

g = Greeter('Fred')  # Construct an instance of the Greeter class
g.greet()            # Call an instance method; prints "Hello, Fred"
g.greet(loud=True)   # Call an instance method; prints "HELLO, FRED!"
#+END_SRC

** Numpy
Provides a high-performance multidimensional array object, and tools for working
with these arrays. Goto library for scientific computing.
*** Arrays
Must be of the same type (np.int64, np.float64)
**** Creation/Functions
#+BEGIN_SRC python
import numpy as np
a = np.array([1, 2, 3])   # Create a rank 1 array
print(type(a))            # Prints "<class 'numpy.ndarray'>"
print(a.shape)            # Prints "(3,)"
b = np.array([[1,2,3],[4,5,6]])    # Create a rank 2 array
print(b.shape)                     # Prints "(2, 3)"
print(b[0, 0], b[0, 1], b[1, 0])   # Prints "1 2 4"

a = np.zeros((2,2))   # Create an array of all zeros
print(a)              # Prints "[[ 0.  0.]
                      #          [ 0.  0.]]"

b = np.ones((1,2))    # Create an array of all ones
print(b)              # Prints "[[ 1.  1.]]"

c = np.full((2,2), 7)  # Create a constant array
print(c)               # Prints "[[ 7.  7.]
                       #          [ 7.  7.]]"

d = np.eye(2)         # Create a 2x2 identity matrix
print(d)              # Prints "[[ 1.  0.]
                      #          [ 0.  1.]]"

e = np.random.random((2,2))  # Create an array filled with random values
print(e)                     # Might print "[[ 0.91940167  0.08143941]
                             #               [ 0.68744134  0.87236687]]"
# TODO np.arange()
#+END_SRC
**** Indexing
***** Slicing
#+BEGIN_SRC python
import numpy as np

# Create the following rank 2 array with shape (3, 4)
# [[ 1  2  3  4]
#  [ 5  6  7  8]
#  [ 9 10 11 12]]
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])

# Use slicing to pull out the subarray consisting of the first 2 rows
# and columns 1 and 2; b is the following array of shape (2, 2):
# [[2 3]
#  [6 7]]
b = a[:2, 1:3]

# A slice of an array is a view into the same data, so modifying it
# will modify the original array.
print(a[0, 1])   # Prints "2"
b[0, 0] = 77     # b[0, 0] is the same piece of data as a[0, 1]
print(a[0, 1])   # Prints "77"

#+END_SRC
Can be mixed with integer indexing
#+BEGIN_SRC python
import numpy as np

# Create the following rank 2 array with shape (3, 4)
# [[ 1  2  3  4]
#  [ 5  6  7  8]
#  [ 9 10 11 12]]
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])

# Two ways of accessing the data in the middle row of the array.
# Mixing integer indexing with slices yields an array of lower rank,
# while using only slices yields an array of the same rank as the
# original array:
row_r1 = a[1, :]    # Rank 1 view of the second row of a
# OR
row_r1 = a[1]
row_r2 = a[1:2, :]  # Rank 2 view of the second row of a
print(row_r1, row_r1.shape)  # Prints "[5 6 7 8] (4,)"
print(row_r2, row_r2.shape)  # Prints "[[5 6 7 8]] (1, 4)"

# We can make the same distinction when accessing columns of an array:
col_r1 = a[:, 1]
col_r2 = a[:, 1:2]
print(col_r1, col_r1.shape)  # Prints "[ 2  6 10] (3,)"
print(col_r2, col_r2.shape)  # Prints "[[ 2]
                             #          [ 6]
                             #          [10]] (3, 1)"
#+END_SRC
***** Integer Array
Integer array indexing allows to construct arbitrary arrays using the data from another array.
#+BEGIN_SRC python
import numpy as np

a = np.array([[1,2], [3, 4], [5, 6]])

# An example of integer array indexing.
# The returned array will have shape (3,) and
print(a[[0, 1, 2], [0, 1, 0]])  # Prints "[1 4 5]"

# The above example of integer array indexing is equivalent to this:
print(np.array([a[0, 0], a[1, 1], a[2, 0]]))  # Prints "[1 4 5]"

# When using integer array indexing, you can reuse the same
# element from the source array:
print(a[[0, 0], [1, 1]])  # Prints "[2 2]"

# Equivalent to the previous integer array indexing example
print(np.array([a[0, 1], a[0, 1]]))  # Prints "[2 2]"
#+END_SRC
Mutating
#+BEGIN_SRC python
import numpy as np

# Create a new array from which we will select elements
a = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])

print(a)  # prints "array([[ 1,  2,  3],
          #                [ 4,  5,  6],
          #                [ 7,  8,  9],
          #                [10, 11, 12]])"

# Create an array of indices
b = np.array([0, 2, 0, 1])

# Select one element from each row of a using the indices in b
print(a[np.arange(4), b])  # Prints "[ 1  6  7 11]"

# Mutate one element from each row of a using the indices in b
a[np.arange(4), b] += 10

print(a)  # prints "array([[11,  2,  3],
          #                [ 4,  5, 16],
          #                [17,  8,  9],
          #                [10, 21, 12]])
#+END_SRC
***** Boolean array indexing
Frequently this type of indexing is used to select the elements of an array that satisfy some condition
#+BEGIN_SRC python
import numpy as np

a = np.array([[1,2], [3, 4], [5, 6]])

bool_idx = (a > 2)   # Find the elements of a that are bigger than 2;
                     # this returns a numpy array of Booleans of the same
                     # shape as a, where each slot of bool_idx tells
                     # whether that element of a is > 2.

print(bool_idx)      # Prints "[[False False]
                     #          [ True  True]
                     #          [ True  True]]"

# We use boolean array indexing to construct a rank 1 array
# consisting of the elements of a corresponding to the True values
# of bool_idx
print(a[bool_idx])  # Prints "[3 4 5 6]"

# We can do all of the above in a single concise statement:
print(a[a > 2])     # Prints "[3 4 5 6]"

#+END_SRC
**** Array Operations
#+BEGIN_SRC python
# Addition
print(x + y)
print(np.add(x, y))
# Substraction
print(x - y)
print(np.subtract(x, y))
# Product: Elementwise
print(x * y)
print(np.multiply(x, y))
# Division: Elementwise
print(x / y)
print(np.divide(x, y))
# Squareroot: Elementwise
print(np.sqrt(x))
#+END_SRC
***** Aggregation
#+BEGIN_SRC python
import numpy as np

x = np.array([[1,2],[3,4]])

print(np.sum(x))  # Compute sum of all elements; prints "10"
print(np.sum(x, axis=0))  # Compute sum of each column; prints "[4 6]"
print(np.sum(x, axis=1))  # Compute sum of each row; prints "[3 7]"
#+END_SRC

**** Linear Algebra Operations
#+BEGIN_SRC python
import numpy as np

x = np.array([[1,2],[3,4]])
y = np.array([[5,6],[7,8]])

v = np.array([9,10])
w = np.array([11, 12])

# Inner product of vectors; both produce 219
print(v.dot(w))
print(np.dot(v, w))

# Matrix / vector product; both produce the rank 1 array [29 67]
print(x.dot(v))
print(np.dot(x, v))

# Matrix / matrix product; both produce the rank 2 array
# [[19 22]
#  [43 50]]
print(x.dot(y))
print(np.dot(x, y))
#+END_SRC


** Pandas
axis: 0 for rows (index), 1 for columns (attributes, series)
*** Series


* Haskell
** Normal forms
*** Thunk
Another name for a function in a "lazy" context: a function yet to be evaluated.
*** (Reduced) Normal Form
Basically an irreducible expression
*** Weak Head Normal Form
"Intermediate step": The outermost expression is not a thunk, but partiall
evaluated.
** Strictness
*** Bottom
Bottom is a notation for a computation that never computes successfully
#+BEGIN_SRC haskell
bottom = bottom
-- OR
undefined = error "Prelude.undefined"
#+END_SRC
*** seq
seq :: a -> b -> b takes two arguments of any type, and returns the second.
However, it also has the important property that it is magically strict in its
first argument. In essence, seq is defined by the following two equations:
#+BEGIN_SRC haskell
-- ⊥ is bottom
⊥ `seq` b = ⊥
a `seq` b = b
#+END_SRC
Example1: make foldl strict
#+BEGIN_SRC haskell
foldl' :: (a -> b -> a) -> a -> [b] -> a
foldl' _ z [] = z
foldl' f z (x:xs) = let z' = f z x in z' `seq` foldl' f z' xs
#+END_SRC
Example2: strict evaluation
#+BEGIN_SRC haskell
($!) :: (a -> b) -> a -> b
f $! x = x `seq` f x
#+END_SRC

** Parallelism
Parallel program solves a single problem. The purity of Haskell makes it
suitable for parallel programming, however, the laziness makes things a little
bit tricky.
*** pseq and par
**** par
It serves a similar purpose to seq: it evaluates its left argument to weak
head normal form, and returns its right. As its name suggests, par can evaluate
its left argument in parallel with whatever other evaluations are occurring.
The par function does not actually promise to evaluate an expression in parallel
with another. It gives the runtime system the freedom to act intelligently when
it encounters a use of par.
**** pseq
It evaluates the expression on the left to WHNF *before* returning the expression
on the right.
